package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ClientAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllPropertiesEquals(Client expected, Client actual) {
        assertClientAutoGeneratedPropertiesEquals(expected, actual);
        assertClientAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAllUpdatablePropertiesEquals(Client expected, Client actual) {
        assertClientUpdatableFieldsEquals(expected, actual);
        assertClientUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientAutoGeneratedPropertiesEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableFieldsEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client relevant properties")
            .satisfies(a -> assertThat(a.getClientLogo()).as("check clientLogo").isEqualTo(expected.getClientLogo()))
            .satisfies(a -> assertThat(a.getName()).as("check name").isEqualTo(expected.getName()))
            .satisfies(a -> assertThat(a.getCode()).as("check code").isEqualTo(expected.getCode()))
            .satisfies(a -> assertThat(a.getMainContactName()).as("check mainContactName").isEqualTo(expected.getMainContactName()))
            .satisfies(a -> assertThat(a.getMainContactEmail()).as("check mainContactEmail").isEqualTo(expected.getMainContactEmail()))
            .satisfies(a ->
                assertThat(a.getCurrentCardHolderNumber())
                    .as("check currentCardHolderNumber")
                    .isEqualTo(expected.getCurrentCardHolderNumber())
            )
            .satisfies(a ->
                assertThat(a.getCurrentBruncheNumber()).as("check currentBruncheNumber").isEqualTo(expected.getCurrentBruncheNumber())
            )
            .satisfies(a ->
                assertThat(a.getCurrentCustomersNumber()).as("check currentCustomersNumber").isEqualTo(expected.getCurrentCustomersNumber())
            )
            .satisfies(a ->
                assertThat(a.getMainContactPhoneNumber()).as("check mainContactPhoneNumber").isEqualTo(expected.getMainContactPhoneNumber())
            )
            .satisfies(a -> assertThat(a.getUrl()).as("check url").isEqualTo(expected.getUrl()))
            .satisfies(a -> assertThat(a.getAddress()).as("check address").isEqualTo(expected.getAddress()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()))
            .satisfies(a -> assertThat(a.getCountryName()).as("check countryName").isEqualTo(expected.getCountryName()))
            .satisfies(a -> assertThat(a.getRegion()).as("check region").isEqualTo(expected.getRegion()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertClientUpdatableRelationshipsEquals(Client expected, Client actual) {
        assertThat(actual)
            .as("Verify Client relationships")
            .satisfies(a -> assertThat(a.getSize()).as("check size").isEqualTo(expected.getSize()))
            .satisfies(a -> assertThat(a.getClientType()).as("check clientType").isEqualTo(expected.getClientType()))
            .satisfies(a -> assertThat(a.getCountry()).as("check country").isEqualTo(expected.getCountry()));
    }
}
