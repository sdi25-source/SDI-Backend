package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RequestOfChangeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestOfChangeAllPropertiesEquals(RequestOfChange expected, RequestOfChange actual) {
        assertRequestOfChangeAutoGeneratedPropertiesEquals(expected, actual);
        assertRequestOfChangeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestOfChangeAllUpdatablePropertiesEquals(RequestOfChange expected, RequestOfChange actual) {
        assertRequestOfChangeUpdatableFieldsEquals(expected, actual);
        assertRequestOfChangeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestOfChangeAutoGeneratedPropertiesEquals(RequestOfChange expected, RequestOfChange actual) {
        assertThat(actual)
            .as("Verify RequestOfChange auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestOfChangeUpdatableFieldsEquals(RequestOfChange expected, RequestOfChange actual) {
        assertThat(actual)
            .as("Verify RequestOfChange relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getKeywords()).as("check keywords").isEqualTo(expected.getKeywords()))
            .satisfies(a -> assertThat(a.getStatus()).as("check status").isEqualTo(expected.getStatus()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRequestOfChangeUpdatableRelationshipsEquals(RequestOfChange expected, RequestOfChange actual) {
        assertThat(actual)
            .as("Verify RequestOfChange relationships")
            .satisfies(a -> assertThat(a.getProductVersion()).as("check productVersion").isEqualTo(expected.getProductVersion()))
            .satisfies(a -> assertThat(a.getClient()).as("check client").isEqualTo(expected.getClient()))
            .satisfies(a -> assertThat(a.getModuleVersions()).as("check moduleVersions").isEqualTo(expected.getModuleVersions()))
            .satisfies(a -> assertThat(a.getCustomisationLevel()).as("check customisationLevel").isEqualTo(expected.getCustomisationLevel())
            );
    }
}
