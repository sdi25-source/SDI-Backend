package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductVersionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVersionAllPropertiesEquals(ProductVersion expected, ProductVersion actual) {
        assertProductVersionAutoGeneratedPropertiesEquals(expected, actual);
        assertProductVersionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVersionAllUpdatablePropertiesEquals(ProductVersion expected, ProductVersion actual) {
        assertProductVersionUpdatableFieldsEquals(expected, actual);
        assertProductVersionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVersionAutoGeneratedPropertiesEquals(ProductVersion expected, ProductVersion actual) {
        assertThat(actual)
            .as("Verify ProductVersion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVersionUpdatableFieldsEquals(ProductVersion expected, ProductVersion actual) {
        assertThat(actual)
            .as("Verify ProductVersion relevant properties")
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getUpdateDate()).as("check updateDate").isEqualTo(expected.getUpdateDate()))
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductVersionUpdatableRelationshipsEquals(ProductVersion expected, ProductVersion actual) {
        assertThat(actual)
            .as("Verify ProductVersion relationships")
            .satisfies(a -> assertThat(a.getProduct()).as("check product").isEqualTo(expected.getProduct()))
            .satisfies(a -> assertThat(a.getModuleVersions()).as("check moduleVersions").isEqualTo(expected.getModuleVersions()))
            .satisfies(a ->
                assertThat(a.getInfraComponentVersions()).as("check infraComponentVersions").isEqualTo(expected.getInfraComponentVersions())
            )
            .satisfies(a -> assertThat(a.getInfraComponents()).as("check infraComponents").isEqualTo(expected.getInfraComponents()))
            .satisfies(a -> assertThat(a.getRoot()).as("check root").isEqualTo(expected.getRoot()));
    }
}
