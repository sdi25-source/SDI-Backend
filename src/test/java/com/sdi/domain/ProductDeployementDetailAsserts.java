package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ProductDeployementDetailAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementDetailAllPropertiesEquals(
        ProductDeployementDetail expected,
        ProductDeployementDetail actual
    ) {
        assertProductDeployementDetailAutoGeneratedPropertiesEquals(expected, actual);
        assertProductDeployementDetailAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementDetailAllUpdatablePropertiesEquals(
        ProductDeployementDetail expected,
        ProductDeployementDetail actual
    ) {
        assertProductDeployementDetailUpdatableFieldsEquals(expected, actual);
        assertProductDeployementDetailUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementDetailAutoGeneratedPropertiesEquals(
        ProductDeployementDetail expected,
        ProductDeployementDetail actual
    ) {
        assertThat(actual)
            .as("Verify ProductDeployementDetail auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementDetailUpdatableFieldsEquals(
        ProductDeployementDetail expected,
        ProductDeployementDetail actual
    ) {
        assertThat(actual)
            .as("Verify ProductDeployementDetail relevant properties")
            .satisfies(a ->
                assertThat(a.getStartDeployementDate()).as("check startDeployementDate").isEqualTo(expected.getStartDeployementDate())
            )
            .satisfies(a -> assertThat(a.getEndDeployementDate()).as("check endDeployementDate").isEqualTo(expected.getEndDeployementDate())
            )
            .satisfies(a -> assertThat(a.getNotes()).as("check notes").isEqualTo(expected.getNotes()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductDeployementDetailUpdatableRelationshipsEquals(
        ProductDeployementDetail expected,
        ProductDeployementDetail actual
    ) {
        assertThat(actual)
            .as("Verify ProductDeployementDetail relationships")
            .satisfies(a -> assertThat(a.getProductDeployement()).as("check productDeployement").isEqualTo(expected.getProductDeployement())
            )
            .satisfies(a ->
                assertThat(a.getInfraComponentVersions()).as("check infraComponentVersions").isEqualTo(expected.getInfraComponentVersions())
            )
            .satisfies(a ->
                assertThat(a.getAllowedModuleVersions()).as("check allowedModuleVersions").isEqualTo(expected.getAllowedModuleVersions())
            )
            .satisfies(a -> assertThat(a.getProductVersion()).as("check productVersion").isEqualTo(expected.getProductVersion()))
            .satisfies(a -> assertThat(a.getDeployementType()).as("check deployementType").isEqualTo(expected.getDeployementType()));
    }
}
