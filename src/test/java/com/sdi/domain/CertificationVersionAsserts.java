package com.sdi.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class CertificationVersionAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCertificationVersionAllPropertiesEquals(CertificationVersion expected, CertificationVersion actual) {
        assertCertificationVersionAutoGeneratedPropertiesEquals(expected, actual);
        assertCertificationVersionAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCertificationVersionAllUpdatablePropertiesEquals(CertificationVersion expected, CertificationVersion actual) {
        assertCertificationVersionUpdatableFieldsEquals(expected, actual);
        assertCertificationVersionUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCertificationVersionAutoGeneratedPropertiesEquals(CertificationVersion expected, CertificationVersion actual) {
        assertThat(actual)
            .as("Verify CertificationVersion auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCertificationVersionUpdatableFieldsEquals(CertificationVersion expected, CertificationVersion actual) {
        assertThat(actual)
            .as("Verify CertificationVersion relevant properties")
            .satisfies(a -> assertThat(a.getVersion()).as("check version").isEqualTo(expected.getVersion()))
            .satisfies(a -> assertThat(a.getCreateDate()).as("check createDate").isEqualTo(expected.getCreateDate()))
            .satisfies(a -> assertThat(a.getExpireDate()).as("check expireDate").isEqualTo(expected.getExpireDate()))
            .satisfies(a -> assertThat(a.getDescription()).as("check description").isEqualTo(expected.getDescription()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCertificationVersionUpdatableRelationshipsEquals(CertificationVersion expected, CertificationVersion actual) {
        assertThat(actual)
            .as("Verify CertificationVersion relationships")
            .satisfies(a -> assertThat(a.getCertification()).as("check certification").isEqualTo(expected.getCertification()))
            .satisfies(a -> assertThat(a.getProducts()).as("check products").isEqualTo(expected.getProducts()))
            .satisfies(a ->
                assertThat(a.getProductDeployements()).as("check productDeployements").isEqualTo(expected.getProductDeployements())
            );
    }
}
